import polars as pl
import utils
from classes import Orf
from data import ORFS, GFF, GFF_POLARS, ORF_DF_COLUMNS, FASTA_DICT, RIBO


def generate_data():

    same_CDS_dframe = (
        ORFS
        .filter(pl.col("Type") == "nc_ovp_same-CDS")
        .with_columns([
            pl.col("ID").apply(lambda value: value.split("_")[3]).alias("Phase"), # Extract absolute strand phase from the ID generated by ORFMine
            pl.lit("NA").alias("Ovp_gene") # Create a column for the gene ID that will be filled by check_double_overlap()
        ])
    )


    same_CDS_dframe = same_CDS_dframe.select(ORF_DF_COLUMNS).apply(utils.check_double_overlap) # Use .apply() method to leverage parallelization

    same_CDS_dframe.columns = ORF_DF_COLUMNS

    grouped = same_CDS_dframe.groupby("Ovp_gene")

    gene_list = list()


    for overlapped_feature_name , data in grouped: # This loop returns the name by which data is groupped, and the data itself as a polars dataframe

        # If overlapped feature is not a gene ( = transposable_element for example ) it's not stored
        if "gene" in GFF_POLARS.filter(pl.col("ID") == overlapped_feature_name)["Type"].unique().to_list(): 

            # Initialize gene object with the name of the overlapped feature
            gene = utils.init_gene_object(overlapped_feature_name, GFF)

            # Iterate over every ORF that overlaps the gene
            for row in data.iter_rows(named = True):

                ribospike = 7 # For now, don't know how data will look like

                orf = Orf(
                    ID = row["ID"],
                    start = int(row["Start"]),
                    end = int(row["End"]),
                    gene = gene,
                    ribospike = ribospike
                    )

                orf.locRiboStart()

                gene.add_orf(key = orf.ID, 
                            value = orf)

            gene.get_adjacent_nucleotides(FASTA_DICT[gene.chromosome]["seq"], nb_codons = 3, nb_nt = 10)

            gene_list.append(gene)

    return gene_list


